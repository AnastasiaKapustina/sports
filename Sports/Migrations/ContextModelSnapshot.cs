// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sports.Models;

namespace Sports.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Sports.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<Guid>("EventTypeId");

                    b.Property<Guid>("GameId");

                    b.Property<int>("Time");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("GameId");

                    b.ToTable("Events");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Event");
                });

            modelBuilder.Entity("Sports.Models.EventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDualPlayer");

                    b.Property<string>("Name");

                    b.Property<Guid>("SportId");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new { Id = new Guid("27afac17-4076-42c9-8c4e-05ad35c98c9c"), IsDualPlayer = false, Name = "Гол", SportId = new Guid("2d247466-f4c9-4827-9d55-ccb6794f4dbf") },
                        new { Id = new Guid("5d42f16d-7dee-4ba2-a652-c26914c4d8c7"), IsDualPlayer = true, Name = "Пас", SportId = new Guid("2d247466-f4c9-4827-9d55-ccb6794f4dbf") },
                        new { Id = new Guid("73a70081-3824-46b0-987f-da268547aab5"), IsDualPlayer = false, Name = "Пенальти", SportId = new Guid("2d247466-f4c9-4827-9d55-ccb6794f4dbf") },
                        new { Id = new Guid("3958f90e-a6b3-4322-bd11-5d03fe40deb8"), IsDualPlayer = false, Name = "Карточка", SportId = new Guid("2d247466-f4c9-4827-9d55-ccb6794f4dbf") },
                        new { Id = new Guid("757f68ce-e92f-4376-959f-85c1b6c8678c"), IsDualPlayer = false, Name = "Гол", SportId = new Guid("f3e01830-f90d-4225-bda3-51cf6eefb740") },
                        new { Id = new Guid("8cb53f7e-ec21-4dd8-8739-3188d71fc144"), IsDualPlayer = true, Name = "Пас", SportId = new Guid("f3e01830-f90d-4225-bda3-51cf6eefb740") },
                        new { Id = new Guid("a7953328-224b-42f6-88a7-3b422b25acce"), IsDualPlayer = false, Name = "Штрафной", SportId = new Guid("f3e01830-f90d-4225-bda3-51cf6eefb740") },
                        new { Id = new Guid("1869553d-53e2-4718-8265-639ef0ae4a5b"), IsDualPlayer = false, Name = "Нарушение", SportId = new Guid("f3e01830-f90d-4225-bda3-51cf6eefb740") }
                    );
                });

            modelBuilder.Entity("Sports.Models.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("SportId");

                    b.Property<Guid>("Team1Id");

                    b.Property<Guid>("Team2Id");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.HasIndex("Team1Id");

                    b.HasIndex("Team2Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Sports.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<Guid>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Sports.Models.Sport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Sports");

                    b.HasData(
                        new { Id = new Guid("2d247466-f4c9-4827-9d55-ccb6794f4dbf"), Name = "Футбол" },
                        new { Id = new Guid("f3e01830-f90d-4225-bda3-51cf6eefb740"), Name = "Баскетбол" }
                    );
                });

            modelBuilder.Entity("Sports.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<Guid>("SportId");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Sports.Models.EventDualPlayer", b =>
                {
                    b.HasBaseType("Sports.Models.Event");

                    b.Property<Guid>("Player1Id");

                    b.Property<Guid>("Player2Id");

                    b.HasIndex("Player1Id");

                    b.HasIndex("Player2Id");

                    b.ToTable("EventDualPlayer");

                    b.HasDiscriminator().HasValue("EventDualPlayer");
                });

            modelBuilder.Entity("Sports.Models.EventSinglePlayer", b =>
                {
                    b.HasBaseType("Sports.Models.Event");

                    b.Property<Guid>("PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("EventSinglePlayer");

                    b.HasDiscriminator().HasValue("EventSinglePlayer");
                });

            modelBuilder.Entity("Sports.Models.Event", b =>
                {
                    b.HasOne("Sports.Models.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sports.Models.Game", "Game")
                        .WithMany("Events")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sports.Models.EventType", b =>
                {
                    b.HasOne("Sports.Models.Sport", "Sport")
                        .WithMany("EventTypes")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sports.Models.Game", b =>
                {
                    b.HasOne("Sports.Models.Sport", "Sport")
                        .WithMany("Games")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sports.Models.Team", "Team1")
                        .WithMany()
                        .HasForeignKey("Team1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sports.Models.Team", "Team2")
                        .WithMany()
                        .HasForeignKey("Team2Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sports.Models.Player", b =>
                {
                    b.HasOne("Sports.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sports.Models.Team", b =>
                {
                    b.HasOne("Sports.Models.Sport", "Sport")
                        .WithMany("Teams")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sports.Models.EventDualPlayer", b =>
                {
                    b.HasOne("Sports.Models.Player", "Player1")
                        .WithMany()
                        .HasForeignKey("Player1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sports.Models.Player", "Player2")
                        .WithMany()
                        .HasForeignKey("Player2Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sports.Models.EventSinglePlayer", b =>
                {
                    b.HasOne("Sports.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
